#!/usr/bin/env python3
"""
AlphaTrackerBot ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä–æ–ø–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π
"""

import sqlite3
import json
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from typing import List, Dict, Optional, Tuple
import re

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ============================================================================

TZ = ZoneInfo("Europe/Kyiv")
WORK_START = 11
WORK_END = 23
DAILY_FEE_USD = 2.5

COMMISSIONED_MEMBERS = {
    "–ù–∞–∑–∞—Ä": 0.2,
    "releZz": 0.2,
    "–ê–Ω–≥–µ–ª–∏–Ω–∞ 19": 0.2,
    "–í–∞–Ω—è": 0.0,
}

KNOWN_PARTICIPANTS = [
    "–ù–∞–∑–∞—Ä", "releZz", "–ê–Ω–≥–µ–ª–∏–Ω–∞ 19", "–í–∞–Ω—è", 
    "–ê–Ω–¥—Ä–µ–π", "–Ø—Ä–∏–∫", "–°–µ—Ä—ë–≥–∞"
]

# ============================================================================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ============================================================================

class Database:
    def __init__(self, db_path="drops.db"):
        self.db_path = db_path
        self.init_db()

    def get_conn(self):
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        return conn

    def init_db(self):
        conn = self.get_conn()
        c = conn.cursor()

        # –ß–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã
        c.execute("""CREATE TABLE IF NOT EXISTS members (
            name TEXT PRIMARY KEY,
            ap INTEGER DEFAULT 0,
            refund_days TEXT DEFAULT '[]',
            last_gap_days TEXT DEFAULT '[0,0]',
            updated_at TEXT
        )""")

        # –°–æ–±—ã—Ç–∏—è (–¥—Ä–æ–ø—ã)
        c.execute("""CREATE TABLE IF NOT EXISTS drop_events (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            when_ts INTEGER NOT NULL,
            ap_threshold INTEGER,
            symbol TEXT,
            status TEXT DEFAULT 'planned',
            created_at TEXT
        )""")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        c.execute("""CREATE TABLE IF NOT EXISTS recommendations (
            event_id INTEGER,
            member_name TEXT,
            score INTEGER,
            signals TEXT,
            rank INTEGER,
            PRIMARY KEY (event_id, member_name)
        )""")

        # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        c.execute("""CREATE TABLE IF NOT EXISTS reservations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            event_id INTEGER,
            member_name TEXT,
            status TEXT DEFAULT 'requested',
            timestamp TEXT
        )""")

        # –û—Ç—á—ë—Ç—ã –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        c.execute("""CREATE TABLE IF NOT EXISTS trade_reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            event_id INTEGER,
            member_name TEXT,
            asset TEXT,
            qty REAL,
            sell_price REAL,
            gross_usd REAL,
            fees_usd REAL,
            net_usd REAL,
            share_model REAL,
            created_at TEXT
        )""")

        conn.commit()
        conn.close()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self.init_members()

    def init_members(self):
        conn = self.get_conn()
        c = conn.cursor()
        for name in KNOWN_PARTICIPANTS:
            c.execute("INSERT OR IGNORE INTO members (name, updated_at) VALUES (?, ?)",
                     (name, self._now()))
        conn.commit()
        conn.close()

    @staticmethod
    def _now():
        return datetime.now(TZ).isoformat()

    def update_member(self, name: str, ap: int, refund_days: List[int], last_gap: Tuple[int, int]):
        conn = self.get_conn()
        c = conn.cursor()
        c.execute("""UPDATE members 
                    SET ap=?, refund_days=?, last_gap_days=?, updated_at=? 
                    WHERE name=?""",
                 (ap, json.dumps(refund_days), json.dumps(list(last_gap)), self._now(), name))
        conn.commit()
        conn.close()

    def get_member(self, name: str) -> Optional[Dict]:
        conn = self.get_conn()
        c = conn.cursor()
        c.execute("SELECT * FROM members WHERE name=?", (name,))
        row = c.fetchone()
        conn.close()
        if row:
            return {
                "name": row["name"],
                "ap": row["ap"],
                "refund_days": json.loads(row["refund_days"]),
                "last_gap_days": json.loads(row["last_gap_days"]),
                "updated_at": row["updated_at"]
            }
        return None

    def get_all_members(self) -> List[Dict]:
        conn = self.get_conn()
        c = conn.cursor()
        c.execute("SELECT * FROM members")
        rows = c.fetchall()
        conn.close()
        result = []
        for row in rows:
            result.append({
                "name": row["name"],
                "ap": row["ap"],
                "refund_days": json.loads(row["refund_days"]),
                "last_gap_days": json.loads(row["last_gap_days"]),
                "updated_at": row["updated_at"]
            })
        return result

    def create_drop_event(self, when_ts: int, ap_threshold: int, symbol: Optional[str] = None) -> int:
        conn = self.get_conn()
        c = conn.cursor()
        c.execute("""INSERT INTO drop_events (when_ts, ap_threshold, symbol, created_at)
                    VALUES (?, ?, ?, ?)""",
                 (when_ts, ap_threshold, symbol or "", self._now()))
        conn.commit()
        event_id = c.lastrowid
        conn.close()
        return event_id

    def get_drop_event(self, event_id: int) -> Optional[Dict]:
        conn = self.get_conn()
        c = conn.cursor()
        c.execute("SELECT * FROM drop_events WHERE id=?", (event_id,))
        row = c.fetchone()
        conn.close()
        if row:
            return {
                "id": row["id"],
                "when_ts": row["when_ts"],
                "ap_threshold": row["ap_threshold"],
                "symbol": row["symbol"],
                "status": row["status"]
            }
        return None

    def save_recommendations(self, event_id: int, recs: List[Tuple[str, int, str, int]]):
        conn = self.get_conn()
        c = conn.cursor()
        c.execute("DELETE FROM recommendations WHERE event_id=?", (event_id,))
        for member_name, score, signals, rank in recs:
            c.execute("""INSERT INTO recommendations 
                        (event_id, member_name, score, signals, rank)
                        VALUES (?, ?, ?, ?, ?)""",
                     (event_id, member_name, score, signals, rank))
        conn.commit()
        conn.close()

    def create_trade_report(self, event_id: int, member_name: str, asset: str, qty: float,
                           sell_price: float, fees_usd: float):
        gross = qty * sell_price
        net = gross - fees_usd
        share_model = COMMISSIONED_MEMBERS.get(member_name, 0.0)

        conn = self.get_conn()
        c = conn.cursor()
        c.execute("""INSERT INTO trade_reports 
                    (event_id, member_name, asset, qty, sell_price, gross_usd, fees_usd, net_usd, share_model, created_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                 (event_id, member_name, asset, qty, sell_price, gross, fees_usd, net, share_model, self._now()))
        conn.commit()
        conn.close()

    def get_stats(self) -> str:
        members = self.get_all_members()
        if not members:
            return "‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

        lines = ["üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n"]
        for m in members:
            refund = m["refund_days"]
            gap = m["last_gap_days"]
            refund_str = ", ".join(map(str, refund)) if refund else "‚Äî"
            gap_str = f"{gap[0]}-{gap[1]}" if gap else "‚Äî"
            lines.append(f"‚Ä¢ **{m['name']}**: {m['ap']}AP | –≤–µ—Ä–Ω—É—Ç [{refund_str}] | –ø–æ—Å–ª–µ–¥–Ω–∏–π [{gap_str}]")
        return "\n".join(lines)


# ============================================================================
# –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø (SCORE)
# ============================================================================

def calculate_score(member: Dict, ap_threshold: int) -> Tuple[int, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (score, signals_text)
    
    +2 ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ AP ‚â§ 3 –¥–Ω–µ–π
    +1 ‚Äî –µ—Å–ª–∏ AP ‚â• (–ø–æ—Ä–æ–≥ + 20)
    +1 ‚Äî –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–æ–ø ‚â• 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    """
    score = 0
    signals = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ refund_days
    refund_days = member.get("refund_days", [])
    if refund_days and min(refund_days) <= 3:
        score += 2
        signals.append(f"refund‚â§3")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ AP
    ap = member.get("ap", 0)
    if ap >= ap_threshold + 20:
        score += 1
        signals.append(f"surplus‚â•20")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ last_gap
    gap = member.get("last_gap_days", [0, 0])
    if gap and gap[1] >= 7:
        score += 1
        signals.append(f"rest‚â•7")

    signals_text = ", ".join(signals) if signals else "‚Äî"
    return min(score, 4), signals_text


def get_top_candidates(db: Database, ap_threshold: int, limit: int = 3) -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ score"""
    members = db.get_all_members()
    
    scored = []
    for m in members:
        score, signals = calculate_score(m, ap_threshold)
        scored.append({
            "name": m["name"],
            "ap": m["ap"],
            "refund_days": m["refund_days"],
            "last_gap_days": m["last_gap_days"],
            "score": score,
            "signals": signals
        })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: score (DESC) ‚Üí AP (DESC) ‚Üí min(refund_days) ‚Üí max(last_gap)
    scored.sort(key=lambda x: (
        -x["score"],
        -x["ap"],
        min(x["refund_days"]) if x["refund_days"] else 999,
        -max(x["last_gap_days"]) if x["last_gap_days"] else 0
    ))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    recs = [(m["name"], m["score"], m["signals"], i + 1) for i, m in enumerate(scored[:limit])]
    # db.save_recommendations(event_id, recs)  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    return scored[:limit]


# ============================================================================
# –ü–ê–†–°–ï–† –ö–û–ú–ê–ù–î
# ============================================================================

def parse_drop_command(text: str) -> Optional[Dict]:
    """
    –ü–∞—Ä—Å–∏—Ç /drop –°–µ—Ä—ë–≥–∞ 240AP –≤–µ—Ä–Ω—É—Ç 3,5 –ø–æ—Å–ª–µ–¥–Ω–∏–π 5-7
    """
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: /drop <–ò–º—è> <AP> –≤–µ—Ä–Ω—É—Ç <—Å–ø–∏—Å–æ–∫> –ø–æ—Å–ª–µ–¥–Ω–∏–π <–¥–∏–∞–ø–∞–∑–æ–Ω>
    pattern = r"/drop\s+(.+?)\s+(\d+)\s*AP\s+–≤–µ—Ä–Ω—É—Ç\s+([\d,]+)\s+–ø–æ—Å–ª–µ–¥–Ω–∏–π\s+(\d+)-(\d+)"
    match = re.search(pattern, text)
    
    if not match:
        return None

    name = match.group(1).strip()
    ap = int(match.group(2))
    refund = [int(x.strip()) for x in match.group(3).split(",")]
    gap_min = int(match.group(4))
    gap_max = int(match.group(5))

    return {
        "name": name,
        "ap": ap,
        "refund_days": refund,
        "last_gap": (gap_min, gap_max)
    }


def parse_newdrop_command(text: str) -> Optional[Dict]:
    """
    –ü–∞—Ä—Å–∏—Ç /newdrop –∑–∞–≤—Ç—Ä–∞ 14:00 –ø–æ—Ä–æ–≥ 200 [CORL]
    –∏–ª–∏ /newdrop 16:30 –ø–æ—Ä–æ–≥ 210 CORL
    """
    pattern = r"/newdrop\s+(?:(–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è)\s+)?(\d{1,2}):(\d{2})\s+–ø–æ—Ä–æ–≥\s+(\d+)(?:\s+(.+))?$"
    match = re.search(pattern, text)
    
    if not match:
        return None

    day_str = match.group(1) or "—Å–µ–≥–æ–¥–Ω—è"
    hour = int(match.group(2))
    minute = int(match.group(3))
    threshold = int(match.group(4))
    symbol = match.group(5) or ""

    now = datetime.now(TZ)
    if day_str == "–∑–∞–≤—Ç—Ä–∞":
        target_date = now + timedelta(days=1)
    else:
        target_date = now

    target_dt = target_date.replace(hour=hour, minute=minute, second=0, microsecond=0)
    when_ts = int(target_dt.timestamp())

    return {
        "when_ts": when_ts,
        "ap_threshold": threshold,
        "symbol": symbol.strip(),
        "datetime": target_dt
    }


def parse_sold_command(text: str) -> Optional[Dict]:
    """
    –ü–∞—Ä—Å–∏—Ç /sold –°–µ—Ä—ë–≥–∞ CORL 125—à—Ç –ø–æ 0.80$ –∫–æ–º—Å–∞ 2.5$
    """
    pattern = r"/sold\s+(.+?)\s+(\w+)\s+(\d+)\s*—à—Ç\s+–ø–æ\s+([\d.]+)\s*\$?\s+–∫–æ–º—Å–∞\s+([\d.]+)\s*\$?"
    match = re.search(pattern, text)
    
    if not match:
        return None

    name = match.group(1).strip()
    asset = match.group(2).strip()
    qty = int(match.group(3))
    sell_price = float(match.group(4))
    fees = float(match.group(5))

    return {
        "member_name": name,
        "asset": asset,
        "qty": qty,
        "sell_price": sell_price,
        "fees_usd": fees
    }


# ============================================================================
# –ò–ù–¢–ï–†–§–ï–ô–° –ë–û–¢–∞ (CLI)
# ============================================================================

class AlphaTrackerBot:
    def __init__(self):
        self.db = Database()
        self.last_drop_event = None

    def is_working_hours(self) -> bool:
        now = datetime.now(TZ)
        return WORK_START <= now.hour < WORK_END

    def handle_command(self, text: str) -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥"""
        
        if not self.is_working_hours() and not text.startswith("/start") and not text.startswith("/stats"):
            return f"üò¥ –ë–æ—Ç –æ—Ç–¥—ã—Ö–∞–µ—Ç –¥–æ {WORK_START}:00 ‚è∞"

        text = text.strip()

        if text == "/start":
            return self.cmd_start()
        elif text == "/stats":
            return self.db.get_stats()
        elif text.startswith("/drop"):
            return self.cmd_drop(text)
        elif text.startswith("/newdrop"):
            return self.cmd_newdrop(text)
        elif text.startswith("/sold"):
            return self.cmd_sold(text)
        elif text.startswith("/who"):
            return self.cmd_who(text)
        else:
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."

    def cmd_start(self) -> str:
        return """ü§ñ **AlphaTrackerBot** ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä–æ–ø–∞–º–∏

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/drop <–ò–º—è> <AP> –≤–µ—Ä–Ω—É—Ç X,Y –ø–æ—Å–ª–µ–¥–Ω–∏–π A-B` ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
‚Ä¢ `/newdrop [–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è] HH:MM –ø–æ—Ä–æ–≥ N [—Ç–∏–∫–µ—Ä]` ‚Äî —Å–æ–∑–¥–∞—Ç—å –¥—Ä–æ–ø
‚Ä¢ `/sold <–ò–º—è> <ASSET> QTY—à—Ç –ø–æ PRICE$ –∫–æ–º—Å–∞ FEE$` ‚Äî –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–¥–∞–∂–µ
‚Ä¢ `/stats` ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
‚Ä¢ `/who –ø–æ—Ä–æ–≥ N` ‚Äî —Ç–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ø–æ—Ä–æ–≥ N

**–ü—Ä–∏–º–µ—Ä—ã:**
/drop –°–µ—Ä—ë–≥–∞ 240AP –≤–µ—Ä–Ω—É—Ç 3,5 –ø–æ—Å–ª–µ–¥–Ω–∏–π 5-7
/newdrop –∑–∞–≤—Ç—Ä–∞ 14:00 –ø–æ—Ä–æ–≥ 200 CORL
/sold –°–µ—Ä—ë–≥–∞ CORL 125—à—Ç –ø–æ 0.80$ –∫–æ–º—Å–∞ 2.5$
/who –ø–æ—Ä–æ–≥ 210

üîó –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: 11:00‚Äì23:00 (Kyiv)
"""

    def cmd_drop(self, text: str) -> str:
        parsed = parse_drop_command(text)
        if not parsed:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n/drop <–ò–º—è> <AP> –≤–µ—Ä–Ω—É—Ç X,Y –ø–æ—Å–ª–µ–¥–Ω–∏–π A-B"

        name = parsed["name"]
        ap = parsed["ap"]
        refund = parsed["refund_days"]
        gap = parsed["last_gap"]

        self.db.update_member(name, ap, refund, gap)
        
        refund_str = ", ".join(map(str, refund))
        gap_str = f"{gap[0]}-{gap[1]}"
        return f"‚úÖ {name}: {ap}AP | –≤–µ—Ä–Ω—É—Ç [{refund_str}] | –ø–æ—Å–ª–µ–¥–Ω–∏–π [{gap_str}]"

    def cmd_newdrop(self, text: str) -> str:
        parsed = parse_newdrop_command(text)
        if not parsed:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n/newdrop –∑–∞–≤—Ç—Ä–∞ 14:00 –ø–æ—Ä–æ–≥ 200 [CORL]"

        event_id = self.db.create_drop_event(
            parsed["when_ts"],
            parsed["ap_threshold"],
            parsed["symbol"]
        )
        self.last_drop_event = event_id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3
        top3 = get_top_candidates(self.db, parsed["ap_threshold"], limit=3)

        dt_str = parsed["datetime"].strftime("%d.%m %H:%M")
        result = f"üíß **–î—Ä–æ–ø {dt_str}** | –ü–æ—Ä–æ–≥ {parsed['ap_threshold']}AP"
        if parsed["symbol"]:
            result += f" | {parsed['symbol']}"
        result += "\n"

        result += f"‚úÖ –õ—É—á—à–µ –ø–æ–¥—Ö–æ–¥—è—Ç:\n"
        for i, cand in enumerate(top3, 1):
            refund = cand["refund_days"]
            gap = cand["last_gap_days"]
            refund_str = ", ".join(map(str, refund)) if refund else "‚Äî"
            gap_str = f"{gap[0]}-{gap[1]}" if gap else "‚Äî"
            result += f"  {i}. **{cand['name']}** (score {cand['score']}) | {cand['ap']}AP | –≤–µ—Ä–Ω—É—Ç [{refund_str}] | –ø–æ—Å–ª–µ–¥–Ω–∏–π [{gap_str}]\n"

        result += f"\n‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: -4—á, -3—á, -2—á, -1—á\n"
        result += f"(–î—Ä–æ–ø ID: {event_id})"
        return result

    def cmd_sold(self, text: str) -> str:
        parsed = parse_sold_command(text)
        if not parsed:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n/sold <–ò–º—è> <ASSET> QTY—à—Ç –ø–æ PRICE$ –∫–æ–º—Å–∞ FEE$"

        member_name = parsed["member_name"]
        asset = parsed["asset"]
        qty = parsed["qty"]
        sell_price = parsed["sell_price"]
        fees = parsed["fees_usd"]

        gross = qty * sell_price
        net = gross - fees

        share_model = COMMISSIONED_MEMBERS.get(member_name, 0.0)
        if share_model > 0:
            member_payout = net * (1 - share_model)
            team_commission = net * share_model
            result = f"‚úÖ **{member_name}** –ø—Ä–æ–¥–∞–ª {qty} {asset} –ø–æ ${sell_price}\n"
            result += f"Gross: ${gross:.2f} | Net: ${net:.2f}\n"
            result += f"üßë –£—á–∞—Å—Ç–Ω–∏–∫—É: ${member_payout:.2f}\n"
            result += f"üë• –ö–æ–º–∞–Ω–¥–µ (20%): ${team_commission:.2f}"
        else:
            result = f"‚úÖ **{member_name}** –ø—Ä–æ–¥–∞–ª {qty} {asset} –ø–æ ${sell_price}\n"
            result += f"Gross: ${gross:.2f} | Net: ${net:.2f}\n"
            result += f"üí∞ –£—á–∞—Å—Ç–Ω–∏–∫—É: ${net:.2f} (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        event_id = self.last_drop_event or 0
        self.db.create_trade_report(event_id, member_name, asset, qty, sell_price, fees)

        return result

    def cmd_who(self, text: str) -> str:
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–æ–ø-3 –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–æ–ø–∞"""
        pattern = r"/who\s+–ø–æ—Ä–æ–≥\s+(\d+)"
        match = re.search(pattern, text)
        if not match:
            return "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /who –ø–æ—Ä–æ–≥ N"

        threshold = int(match.group(1))
        top3 = get_top_candidates(self.db, threshold, limit=3)

        result = f"üéØ **–¢–æ–ø-3 –Ω–∞ –ø–æ—Ä–æ–≥ {threshold}AP**\n"
        for i, cand in enumerate(top3, 1):
            refund_str = ", ".join(map(str, cand["refund_days"])) if cand["refund_days"] else "‚Äî"
            gap_str = f"{cand['last_gap_days'][0]}-{cand['last_gap_days'][1]}" if cand["last_gap_days"] else "‚Äî"
            result += f"{i}. **{cand['name']}** ({cand['score']}) | {cand['ap']}AP | [{refund_str}] | [{gap_str}]\n"

        return result


# ============================================================================
# TELEGRAM BOT
# ============================================================================

import os
from typing import Optional

# üëá –°–Æ–î–ê –í–°–¢–ê–í–¨ –¢–û–ö–ï–ù! –ò–ª–∏ –∑–∞–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")

# –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
# pip install pyTelegramBotAPI
# import telebot
# bot_tg = telebot.TeleBot(BOT_TOKEN)

class TelegramBotAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è pyTelegramBotAPI"""
    
    def __init__(self, token: str):
        try:
            import telebot
            self.bot = telebot.TeleBot(token)
            self.tracker = AlphaTrackerBot()
            self.is_connected = True
            print(f"‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        except ImportError:
            print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pyTelegramBotAPI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏: pip install pyTelegramBotAPI")
            self.is_connected = False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.is_connected = False

    def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.is_connected:
            return

        @self.bot.message_handler(func=lambda message: True)
        def handle_message(message):
            text = message.text.strip()
            response = self.tracker.handle_command(text)
            self.bot.reply_to(message, response, parse_mode="Markdown")

    def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç polling"""
        if not self.is_connected:
            print("‚ùå Telegram –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return

        print("üöÄ Telegram –±–æ—Ç –Ω–∞—á–∞–ª —Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...")
        try:
            self.bot.infinity_polling()
        except KeyboardInterrupt:
            print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# ============================================================================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ (CLI + Telegram)
# ============================================================================

def main():
    print("ü§ñ AlphaTrackerBot v1.0\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if BOT_TOKEN == "7813840039:AAFquVUm1z_IXM60VJwWqftocUCFYGhHRYI":
        print("‚ö†Ô∏è  –¢–æ–∫–µ–Ω Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("   –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:\n")
        print("   1) CLI —Ä–µ–∂–∏–º (–∫–æ–Ω—Å–æ–ª—å)")
        print("   2) Telegram —Ä–µ–∂–∏–º (–Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω)\n")
        
        choice = input("–í—ã–±–æ—Ä (1 –∏–ª–∏ 2): ").strip()
        
        if choice == "2":
            print("\nüìå –î–ª—è Telegram —Ä–µ–∂–∏–º–∞:\n")
            print("   a) –ü–æ–ª—É—á–∏ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
            print("   b) –ó–∞–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            print("      export BOT_TOKEN='—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å'")
            print("   c) –ò–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å—Ç—Ä–æ–∫—É 362 –≤ –∫–æ–¥–µ:")
            print("      BOT_TOKEN = '—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å'\n")
            return
        
        choice = "1"
    else:
        choice = input("CLI (1) –∏–ª–∏ Telegram (2)? [1]: ").strip() or "1"

    if choice == "2":
        # Telegram —Ä–µ–∂–∏–º
        tg_bot = TelegramBotAdapter(BOT_TOKEN)
        if tg_bot.is_connected:
            tg_bot.setup_handlers()
            tg_bot.start_polling()
    else:
        # CLI —Ä–µ–∂–∏–º
        bot = AlphaTrackerBot()
        print("ü§ñ AlphaTrackerBot –∑–∞–ø—É—â–µ–Ω (CLI —Ä–µ–∂–∏–º)")
        print("–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏. /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞.\n")

        while True:
            try:
                user_input = input(">>> ").strip()
                if user_input.lower() == "/exit":
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                if not user_input:
                    continue

                response = bot.handle_command(user_input)
                print(f"\n{response}\n")
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}\n")


if __name__ == "__main__":
    main()
